#!/bin/bash

branch_merged () {
    if ! (git -C . rev-parse 2>/dev/null); then
        echo "Not in a git repo - ${PWD}"
        return
    fi

    BRANCH="$(git symbolic-ref --short HEAD)"

    git checkout -b "merged_${BRANCH}"
    git branch -D "${BRANCH}"

    if (git checkout main 2> /dev/null); then
        git pull origin main
    else
        git checkout master
        git pull origin master
    fi
}

bootstrap_aws_env () {
    # Check for AWS credential variables
    FAIL=0
    [[ -z "${AWS_ACCESS_KEY_ID}" ]] && echo "\"AWS_ACCESS_KEY_ID\" is not set" && FAIL=1
    [[ -z "${AWS_SECRET_ACCESS_KEY}" ]] && echo "\"AWS_SECRET_ACCESS_KEY\" is not set" && FAIL=1
    [[ -z "${AWS_SESSION_TOKEN}" ]] && echo "\"AWS_SESSION_TOKEN\" is not set" && FAIL=1
    [[ $FAIL -ne 0 ]] && return $FAIL

    export AWS_PROFILE="default"
}

list_clusters () {
    if ! (bootstrap_aws_env); then
        return 1
    fi

    aws eks list-clusters
}

update_kubeconfig () {
    if ! (bootstrap_aws_env); then
        return 1
    fi

    if (( ${#} > 1 )); then
        ALIAS=$2
    else
        ALIAS=$1
    fi

    aws eks update-kubeconfig --name $1 --alias ${ALIAS}
}

dotheargo () {
    ARGO_HOSTNAME=$(kubectl get service argocd-server -n argocd -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
    ARGO_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d)
    echo "admin: ${ARGO_PASSWORD}"
    argocd login $ARGO_HOSTNAME --username admin --password "${ARGO_PASSWORD}"
    argocd account update-password --account admin --current-password "${ARGO_PASSWORD}"
    echo
    echo "Argo Hostname: ${ARGO_HOSTNAME}"
}

killagent () {
    ssh-agent -k
    unset SSH_AUTH_SOCK
    unset SSH_AGENT_PID
    rm ~/.ssh-agent
}

newagent () {
    if [[ -e ~/.ssh-agent ]]; then
        killagent
    fi

    ssh-agent -s > ~/.ssh-agent
    eval $(cat ~/.ssh-agent)
    ssh-add ~/.ssh/id_rsa
}

loadagent () {
    # If the agent pid env var isn't set, try to load the agent
    if [[ -z "${SSH_AGENT_PID}" ]]; then
        if [[ -e ~/.ssh-agent ]]; then
            eval $(cat ~/.ssh-agent)
        fi
    fi

    # If this fails, an agent couldn't be loaded
    if ! ( ssh-add -l ); then
        newagent
    fi
}

g () {
    loadagent
    eval $(brew --prefix git)/bin/git $@
}
